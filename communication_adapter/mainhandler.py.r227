'''
Created on Jun 20, 2013

@author: acer
'''

import tornado

import urllib
import logging
from urllib import FancyURLopener
from contentsplitengine import HTMLPage,DataFormator
from unitgenerator.xmlconverter.Blog2XML import Blog2XML
from xml.etree  import ElementTree
import constants.Constants as const

session = None

HTTP_PREFIX = "http://"
HTTPS_PREFIX = "https://"
HAS_MOBILE_SITE = 123

class MainHandler(tornado.web.RequestHandler):
    '''
        
    '''
    
    mirrored_url=""
    
    
    def get(self):
#        self.render("proxy.html")
        #Initial setup of cookie
        if not self.get_secure_cookie(const.sessionID):
            #This means that the app id is not authenticated. Need to pass a error xml
            self.write("This means that the app id is not authenticated. Need to pass a error xml")
            
        else:
#            ses_id = self.get_cookie(sessionID)
#            self.write("the session id is "+ses_id)
            url = self.get_argument("url", default=None, strip=False)
            
            if url is None:
                self.render("proxy.html") 
                return
            else:
                self.mirrored_url = const.HTTP_PREFIX + url
                
                rawPage=""
                try:
                    rawPage=urllib.urlopen(self.mirrored_url)  
                except Exception,e:
                    #Exception Handling Required...!!!!!!
                #             self.response.write("An Error Occured!!\n" + str(e))
                #             return 
                    self.writeContent(rawPage, True)
                    logging.error('Error Fetching URL: :(:(' + str(e))
                    return
                
                if(rawPage.getcode() == const.HTTP_OK):
                    if(self.CheckForMobileSite()):
                        return 
                self.writeContent(rawPage)
                
    def writeContent(self, rawPage, urlFetctError = False):
        
        article = None
        favicon = ''
        if(urlFetctError):
            statuscode = const.URL_FETCH_ERROR
        else:
            statuscode=rawPage.getcode()
            if(statuscode==const.HTTP_OK):
                html = HTMLPage.HTMLPage(rawPage, rawPage.geturl())
                data=html.extract_mainarticle()
                formator = DataFormator.DataFormator(data)
                article=formator.getFormattedData()
                favicon = html.getFavicon()
        bxml = Blog2XML(article)
        tree = bxml.generateXML(statuscode, favicon)
        self.sendXML(tree)
        
    def  CheckForMobileSite(self):
        class MyOpener(FancyURLopener):
            version = 'Opera/9.80 (J2ME/MIDP; Opera Mini/9 (Compatible; MSIE:9.0; iPhone; BlackBerry9700; AppleWebKit/24.746; U; en) Presto/2.5.25 Version/10.54'

        myopener = MyOpener()
        data = myopener.open(self.mirrored_url)
        if(str(data.geturl()).startswith("http://m.")):
            bxml = Blog2XML(None)
            tree = bxml.generateXML(const.HAS_MOBILE_SITE, str(data.geturl()))
            self.sendXML(tree)
            return True
        return False


    def sendXML(self, xmltree):
        xmlstr = ElementTree.tostring(xmltree.getroot(), encoding='us-ascii', method='xml')
        self.add_header("Access-Control-Allow-Origin", "*")
        self.set_header('Content-Type', 'text/xml')   
        self.write(xmlstr)        
        

